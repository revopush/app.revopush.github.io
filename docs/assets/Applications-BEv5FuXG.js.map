{"version":3,"file":"Applications-BEv5FuXG.js","sources":["../../src/screens/Applications/application/Add.tsx","../../src/screens/Applications/useApplicationsColumns.tsx","../../src/screens/Applications/application/Edit.tsx","../../src/screens/Applications/Applications.tsx"],"sourcesContent":["import { type FC } from 'react';\nimport { Form, Input, Modal, type FormProps, App } from 'antd';\nimport { useMutation } from '@tanstack/react-query';\nimport { addNewApp } from '../../../api/client.ts';\nimport { AxiosError, type AxiosResponse } from 'axios';\n\ntype AddApplicationProps = {\n  isOpen: boolean;\n  onSuccess: () => void;\n  onCancel: () => void;\n};\n\ntype FieldType = {\n  appName: string;\n};\n\nexport const AddApplicationModal: FC<AddApplicationProps> = ({\n  isOpen,\n  onSuccess,\n  onCancel,\n}) => {\n  const [form] = Form.useForm<FieldType>();\n  const { message } = App.useApp();\n\n  const { mutate, isPending } = useMutation<\n    AxiosResponse,\n    AxiosError,\n    { name: string }\n  >({\n    mutationFn: addNewApp,\n    onSuccess: () => {\n      form.resetFields();\n      onSuccess();\n    },\n    onError: (error) => {\n      message.open({\n        type: 'error',\n        content: (error?.response?.data as string) || \"Couldn't create new app\",\n      });\n    },\n  });\n\n  const onSubmit: FormProps<FieldType>['onFinish'] = ({ appName }) => {\n    mutate({\n      name: appName,\n    });\n  };\n\n  const onFormCancel = () => {\n    form.resetFields();\n    onCancel();\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"New application\"\n        open={isOpen}\n        okText=\"Add new app\"\n        onOk={() => form.submit()}\n        confirmLoading={isPending}\n        onCancel={onFormCancel}\n      >\n        <Form form={form} layout=\"vertical\" onFinish={onSubmit}>\n          <Form.Item<FieldType>\n            label=\"Appication name\"\n            extra=\"With new app we create default deployments: Production and Staging\"\n            name=\"appName\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your application name!',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { Button, Flex, App, Popover, TableProps, Tag, Typography } from 'antd';\nimport { MoreOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { Application } from './types.ts';\nimport { tagsColorMap } from '../../utils/tags.ts';\nimport { useMutation } from '@tanstack/react-query';\nimport { AxiosError, AxiosResponse } from 'axios';\nimport { deleteApp } from '../../api/client.ts';\n\nconst { Text } = Typography;\n\nexport const useApplicationsColumns = (\n  onSuccessAction: () => void,\n  onEditAction: (appName: string) => void\n): TableProps<Application>['columns'] => {\n  const { message, modal } = App.useApp();\n\n  const { mutate } = useMutation<AxiosResponse, AxiosError, string>({\n    mutationFn: deleteApp,\n    onSuccess: () => {\n      message.success('Successfully deleted');\n      onSuccessAction();\n    },\n    onError: (error) => {\n      message.open({\n        type: 'error',\n        content:\n          (error?.response?.data as string) || \"Couldn't delete application\",\n      });\n    },\n  });\n\n  const columns: TableProps<Application>['columns'] = useMemo(\n    () => [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        minWidth: 200,\n        className: 'table-cursor',\n        render: (text) => text,\n      },\n      {\n        title: 'Deployments',\n        key: 'deployments',\n        dataIndex: 'deployments',\n        render: (_, { deployments }) =>\n          deployments?.length > 0 ? (\n            deployments?.map((deployment, index) => (\n              <Tag color={tagsColorMap[index]} key={index}>\n                {deployment}\n              </Tag>\n            ))\n          ) : (\n            <Text type=\"secondary\">No deployments yet</Text>\n          ),\n      },\n      {\n        title: 'Actions',\n        key: 'actions',\n        width: 100,\n        align: 'center',\n\n        render: (_, record) => (\n          <Popover\n            content={\n              <Flex vertical gap=\"small\">\n                <Button\n                  onClick={(event) => {\n                    event.stopPropagation();\n\n                    onEditAction(record?.name);\n                  }}\n                  type=\"text\"\n                  icon={<EditOutlined />}\n                >\n                  Edit\n                </Button>\n                <Button\n                  onClick={(event) => {\n                    event.stopPropagation();\n\n                    modal.confirm({\n                      icon: null,\n                      title: 'Confirm',\n                      content: 'Are you sure you want to remove application?',\n                      onOk: () => {\n                        mutate(record?.name);\n                      },\n                    });\n                  }}\n                  type=\"text\"\n                  danger\n                  icon={<DeleteOutlined />}\n                >\n                  Delete\n                </Button>\n              </Flex>\n            }\n            trigger=\"click\"\n          >\n            <Button\n              onClick={(event) => {\n                event.stopPropagation();\n              }}\n              icon={<MoreOutlined />}\n              type=\"text\"\n            />\n          </Popover>\n        ),\n      },\n    ],\n    [modal, mutate, onEditAction]\n  );\n\n  return columns;\n};\n","import { type FC, useEffect } from 'react';\nimport { Form, Input, Modal, type FormProps, App } from 'antd';\nimport { AxiosError, type AxiosResponse } from 'axios';\nimport { useMutation } from '@tanstack/react-query';\nimport { editApp } from '../../../api/client.ts';\n\ntype EditApplicationProps = {\n  isOpen: boolean;\n  application: string;\n  onSuccess: () => void;\n  onCancel: () => void;\n};\n\ntype FieldType = {\n  appName: string;\n};\n\nexport const EditApplicationModal: FC<EditApplicationProps> = ({\n  isOpen,\n  application,\n  onSuccess,\n  onCancel,\n}) => {\n  const [form] = Form.useForm<FieldType>();\n  const { message } = App.useApp();\n\n  useEffect(() => {\n    form.setFieldValue('appName', application);\n  }, [form, application]);\n\n  const { mutate, isPending } = useMutation<\n    AxiosResponse,\n    AxiosError,\n    {\n      name: string;\n      newName: string;\n    }\n  >({\n    mutationFn: editApp,\n    onSuccess: () => {\n      form.resetFields();\n      onSuccess();\n    },\n    onError: (error) => {\n      message.open({\n        type: 'error',\n        content:\n          (error?.response?.data as string) || \"Couldn't update application\",\n      });\n    },\n  });\n\n  const onSubmit: FormProps<FieldType>['onFinish'] = ({ appName }) => {\n    mutate({\n      name: application,\n      newName: appName,\n    });\n  };\n\n  const onFormCancel = () => {\n    form.resetFields();\n    onCancel();\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Edit application\"\n        open={isOpen}\n        okText=\"Update app\"\n        onOk={() => form.submit()}\n        confirmLoading={isPending}\n        onCancel={onFormCancel}\n      >\n        <Form form={form} layout=\"vertical\" onFinish={onSubmit}>\n          <Form.Item<FieldType>\n            label=\"Appication name\"\n            name=\"appName\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your application name!',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport {\n  Layout,\n  Typography,\n  Table,\n  Skeleton,\n  Button,\n  Flex,\n  Breadcrumb,\n  Result,\n  Card,\n} from 'antd';\nimport { AppstoreAddOutlined } from '@ant-design/icons';\n\nimport { useQuery } from '@tanstack/react-query';\nimport SideBar from '../../components/SideBar/SideBar.tsx';\nimport { fetchApps } from '../../api/client.ts';\nimport ContentFooter from '../../components/Footer/Footer.tsx';\nimport { AddApplicationModal } from './application/Add.tsx';\nimport { useApplicationsColumns } from './useApplicationsColumns.tsx';\n\nimport { Application } from './types.ts';\nimport '../../index.css';\nimport { EditApplicationModal } from './application/Edit.tsx';\n\nconst { Title } = Typography;\nconst { Content } = Layout;\n\nconst Applications = () => {\n  const navigate = useNavigate();\n  const [selectedApp, setSelectedApp] = useState<string | null>(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  const { isPending, data, refetch } = useQuery({\n    queryKey: ['apps'],\n    queryFn: fetchApps,\n  });\n\n  const onEditAction = (appName: string) => {\n    setSelectedApp(appName);\n    setShowEditModal(true);\n  };\n\n  const columns = useApplicationsColumns(refetch, onEditAction);\n\n  const breadcrumb = [\n    {\n      title: 'Home',\n      onClick: () => navigate('/'),\n    },\n    {\n      title: 'Applications',\n    },\n  ];\n\n  // TODO: Add global error handling and page with help\n\n  return (\n    <SideBar>\n      <Layout>\n        <Content\n          style={{\n            paddingRight: 50,\n            paddingTop: 20,\n          }}\n        >\n          <Breadcrumb separator=\">\" items={breadcrumb} />\n          <Flex align=\"center\" justify=\"space-between\">\n            <Title level={2}>Applications</Title>\n            <Button onClick={() => setShowAddModal(true)} type=\"primary\">\n              Add an Application\n            </Button>\n          </Flex>\n\n          <Skeleton loading={isPending}>\n            {data?.apps?.length > 0 ? (\n              <Table<Application>\n                rowKey=\"name\"\n                columns={columns}\n                dataSource={data.apps}\n                pagination={false}\n                onRow={(record) => ({\n                  onClick: () => {\n                    navigate(`/applications/${record.name}`);\n                  },\n                })}\n              />\n            ) : (\n              <Card>\n                <Result\n                  title=\"Start your project\"\n                  subTitle=\"Get started with Revopush by creating an application.\"\n                  icon={<AppstoreAddOutlined />}\n                  extra={[\n                    <Button\n                      onClick={() => setShowAddModal(true)}\n                      type=\"default\"\n                      key=\"console\"\n                    >\n                      Add an Application\n                    </Button>,\n                  ]}\n                ></Result>\n              </Card>\n            )}\n          </Skeleton>\n        </Content>\n      </Layout>\n      <AddApplicationModal\n        isOpen={showAddModal}\n        onCancel={() => setShowAddModal(false)}\n        onSuccess={() => {\n          refetch();\n          setShowAddModal(false);\n        }}\n      />\n      <EditApplicationModal\n        isOpen={showEditModal}\n        application={selectedApp!}\n        onCancel={() => {\n          setShowEditModal(false);\n          setSelectedApp(null);\n        }}\n        onSuccess={() => {\n          refetch();\n          setSelectedApp(null);\n          setShowEditModal(false);\n        }}\n      />\n      <ContentFooter />\n    </SideBar>\n  );\n};\n\nexport default Applications;\n"],"names":["AddApplicationModal","isOpen","onSuccess","onCancel","form","Form","message","App","mutate","isPending","useMutation","addNewApp","error","_a","onSubmit","appName","onFormCancel","jsx","Fragment","Modal","Input","Text","Typography","useApplicationsColumns","onSuccessAction","onEditAction","modal","deleteApp","useMemo","text","_","deployments","deployment","index","Tag","tagsColorMap","record","Popover","jsxs","Flex","Button","event","EditOutlined","DeleteOutlined","MoreOutlined","EditApplicationModal","application","useEffect","editApp","Title","Content","Layout","Applications","navigate","useNavigate","selectedApp","setSelectedApp","useState","showAddModal","setShowAddModal","showEditModal","setShowEditModal","data","refetch","useQuery","fetchApps","columns","breadcrumb","SideBar","Breadcrumb","Skeleton","Table","Card","Result","AppstoreAddOutlined","ContentFooter"],"mappings":"q8BAgBO,MAAMA,EAA+C,CAAC,CAC3D,OAAAC,EACA,UAAAC,EACA,SAAAC,CACF,IAAM,CACJ,KAAM,CAACC,CAAI,EAAIC,EAAK,QAAmB,EACjC,CAAE,QAAAC,CAAA,EAAYC,EAAI,OAAO,EAEzB,CAAE,OAAAC,EAAQ,UAAAC,CAAU,EAAIC,EAI5B,CACA,WAAYC,EACZ,UAAW,IAAM,CACfP,EAAK,YAAY,EACPF,EAAA,CACZ,EACA,QAAUU,GAAU,OAClBN,EAAQ,KAAK,CACX,KAAM,QACN,UAAUO,EAAAD,GAAA,YAAAA,EAAO,WAAP,YAAAC,EAAiB,OAAmB,yBAAA,CAC/C,CAAA,CACH,CACD,EAEKC,EAA6C,CAAC,CAAE,QAAAC,KAAc,CAC3DP,EAAA,CACL,KAAMO,CAAA,CACP,CACH,EAEMC,EAAe,IAAM,CACzBZ,EAAK,YAAY,EACRD,EAAA,CACX,EAEA,OAEIc,MAAAC,EAAAA,SAAA,CAAA,SAAAD,EAAA,IAACE,EAAA,CACC,MAAM,kBACN,KAAMlB,EACN,OAAO,cACP,KAAM,IAAMG,EAAK,OAAO,EACxB,eAAgBK,EAChB,SAAUO,EAEV,eAACX,EAAK,CAAA,KAAAD,EAAY,OAAO,WAAW,SAAUU,EAC5C,SAAAG,EAAA,IAACZ,EAAK,KAAL,CACC,MAAM,kBACN,MAAM,qEACN,KAAK,UACL,MAAO,CACL,CACE,SAAU,GACV,QAAS,qCAAA,CAEb,EAEA,eAACe,EAAM,CAAA,CAAA,CAAA,CAAA,CAEX,CAAA,CAAA,CAAA,EAEJ,CAEJ,ECxEM,CAAE,KAAAC,CAAS,EAAAC,EAEJC,EAAyB,CACpCC,EACAC,IACuC,CACvC,KAAM,CAAE,QAAAnB,EAAS,MAAAoB,GAAUnB,EAAI,OAAO,EAEhC,CAAE,OAAAC,CAAO,EAAIE,EAA+C,CAChE,WAAYiB,EACZ,UAAW,IAAM,CACfrB,EAAQ,QAAQ,sBAAsB,EACtBkB,EAAA,CAClB,EACA,QAAUZ,GAAU,OAClBN,EAAQ,KAAK,CACX,KAAM,QACN,UACGO,EAAAD,GAAA,YAAAA,EAAO,WAAP,YAAAC,EAAiB,OAAmB,6BAAA,CACxC,CAAA,CACH,CACD,EAqFM,OAnF6Ce,EAAA,QAClD,IAAM,CACJ,CACE,MAAO,OACP,UAAW,OACX,IAAK,OACL,SAAU,IACV,UAAW,eACX,OAASC,GAASA,CACpB,EACA,CACE,MAAO,cACP,IAAK,cACL,UAAW,cACX,OAAQ,CAACC,EAAG,CAAE,YAAAC,CAAY,KACxBA,GAAA,YAAAA,EAAa,QAAS,EACpBA,GAAA,YAAAA,EAAa,IAAI,CAACC,EAAYC,IAC3BhB,EAAA,IAAAiB,EAAA,CAAI,MAAOC,EAAaF,CAAK,EAC3B,SADmCD,CAAA,EAAAC,CAEtC,GAGDhB,EAAA,IAAAI,EAAA,CAAK,KAAK,YAAY,SAAkB,oBAAA,CAAA,CAE/C,EACA,CACE,MAAO,UACP,IAAK,UACL,MAAO,IACP,MAAO,SAEP,OAAQ,CAACS,EAAGM,IACVnB,EAAA,IAACoB,EAAA,CACC,QACGC,EAAAA,KAAAC,EAAA,CAAK,SAAQ,GAAC,IAAI,QACjB,SAAA,CAAAtB,EAAA,IAACuB,EAAA,CACC,QAAUC,GAAU,CAClBA,EAAM,gBAAgB,EAEtBhB,EAAaW,GAAA,YAAAA,EAAQ,IAAI,CAC3B,EACA,KAAK,OACL,WAAOM,EAAa,EAAA,EACrB,SAAA,MAAA,CAED,EACAzB,EAAA,IAACuB,EAAA,CACC,QAAUC,GAAU,CAClBA,EAAM,gBAAgB,EAEtBf,EAAM,QAAQ,CACZ,KAAM,KACN,MAAO,UACP,QAAS,+CACT,KAAM,IAAM,CACVlB,EAAO4B,GAAA,YAAAA,EAAQ,IAAI,CAAA,CACrB,CACD,CACH,EACA,KAAK,OACL,OAAM,GACN,WAAOO,EAAe,EAAA,EACvB,SAAA,QAAA,CAAA,CAED,EACF,EAEF,QAAQ,QAER,SAAA1B,EAAA,IAACuB,EAAA,CACC,QAAUC,GAAU,CAClBA,EAAM,gBAAgB,CACxB,EACA,WAAOG,EAAa,EAAA,EACpB,KAAK,MAAA,CAAA,CACP,CAAA,CACF,CAGN,EACA,CAAClB,EAAOlB,EAAQiB,CAAY,CAC9B,CAGF,ECnGaoB,EAAiD,CAAC,CAC7D,OAAA5C,EACA,YAAA6C,EACA,UAAA5C,EACA,SAAAC,CACF,IAAM,CACJ,KAAM,CAACC,CAAI,EAAIC,EAAK,QAAmB,EACjC,CAAE,QAAAC,CAAA,EAAYC,EAAI,OAAO,EAE/BwC,EAAAA,UAAU,IAAM,CACT3C,EAAA,cAAc,UAAW0C,CAAW,CAAA,EACxC,CAAC1C,EAAM0C,CAAW,CAAC,EAEtB,KAAM,CAAE,OAAAtC,EAAQ,UAAAC,CAAU,EAAIC,EAO5B,CACA,WAAYsC,EACZ,UAAW,IAAM,CACf5C,EAAK,YAAY,EACPF,EAAA,CACZ,EACA,QAAUU,GAAU,OAClBN,EAAQ,KAAK,CACX,KAAM,QACN,UACGO,EAAAD,GAAA,YAAAA,EAAO,WAAP,YAAAC,EAAiB,OAAmB,6BAAA,CACxC,CAAA,CACH,CACD,EAEKC,EAA6C,CAAC,CAAE,QAAAC,KAAc,CAC3DP,EAAA,CACL,KAAMsC,EACN,QAAS/B,CAAA,CACV,CACH,EAEMC,EAAe,IAAM,CACzBZ,EAAK,YAAY,EACRD,EAAA,CACX,EAEA,OAEIc,MAAAC,EAAAA,SAAA,CAAA,SAAAD,EAAA,IAACE,EAAA,CACC,MAAM,mBACN,KAAMlB,EACN,OAAO,aACP,KAAM,IAAMG,EAAK,OAAO,EACxB,eAAgBK,EAChB,SAAUO,EAEV,eAACX,EAAK,CAAA,KAAAD,EAAY,OAAO,WAAW,SAAUU,EAC5C,SAAAG,EAAA,IAACZ,EAAK,KAAL,CACC,MAAM,kBACN,KAAK,UACL,MAAO,CACL,CACE,SAAU,GACV,QAAS,qCAAA,CAEb,EAEA,eAACe,EAAM,CAAA,CAAA,CAAA,CAAA,CAEX,CAAA,CAAA,CAAA,EAEJ,CAEJ,ECjEM,CAAE,MAAA6B,CAAU,EAAA3B,EACZ,CAAE,QAAA4B,CAAY,EAAAC,EAEdC,GAAe,IAAM,OACzB,MAAMC,EAAWC,EAAY,EACvB,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAwB,IAAI,EAC5D,CAACC,EAAcC,CAAe,EAAIF,EAAAA,SAAS,EAAK,EAChD,CAACG,EAAeC,CAAgB,EAAIJ,EAAAA,SAAS,EAAK,EAElD,CAAE,UAAAhD,EAAW,KAAAqD,EAAM,QAAAC,CAAA,EAAYC,EAAS,CAC5C,SAAU,CAAC,MAAM,EACjB,QAASC,CAAA,CACV,EAOKC,EAAU3C,EAAuBwC,EALjBhD,GAAoB,CACxCyC,EAAezC,CAAO,EACtB8C,EAAiB,EAAI,CACvB,CAE4D,EAEtDM,EAAa,CACjB,CACE,MAAO,OACP,QAAS,IAAMd,EAAS,GAAG,CAC7B,EACA,CACE,MAAO,cAAA,CAEX,EAIA,cACGe,EACC,CAAA,SAAA,CAAAnD,MAACkC,EACC,CAAA,SAAAb,EAAA,KAACY,EAAA,CACC,MAAO,CACL,aAAc,GACd,WAAY,EACd,EAEA,SAAA,CAAAjC,EAAA,IAACoD,EAAW,CAAA,UAAU,IAAI,MAAOF,EAAY,EAC5C7B,EAAA,KAAAC,EAAA,CAAK,MAAM,SAAS,QAAQ,gBAC3B,SAAA,CAACtB,EAAA,IAAAgC,EAAA,CAAM,MAAO,EAAG,SAAY,eAAA,EAC7BhC,EAAAA,IAACuB,GAAO,QAAS,IAAMmB,EAAgB,EAAI,EAAG,KAAK,UAAU,SAE7D,oBAAA,CAAA,CAAA,EACF,QAECW,EAAS,CAAA,QAAS7D,EAChB,WAAMI,EAAAiD,GAAA,YAAAA,EAAA,OAAA,YAAAjD,EAAM,QAAS,EACpBI,EAAA,IAACsD,EAAA,CACC,OAAO,OACP,QAAAL,EACA,WAAYJ,EAAK,KACjB,WAAY,GACZ,MAAQ1B,IAAY,CAClB,QAAS,IAAM,CACJiB,EAAA,iBAAiBjB,EAAO,IAAI,EAAE,CAAA,CAE3C,EAAA,CACF,QAECoC,EACC,CAAA,SAAAvD,EAAA,IAACwD,EAAA,CACC,MAAM,qBACN,SAAS,wDACT,WAAOC,EAAoB,EAAA,EAC3B,MAAO,CACLzD,EAAA,IAACuB,EAAA,CACC,QAAS,IAAMmB,EAAgB,EAAI,EACnC,KAAK,UAEN,SAAA,oBAAA,EADK,SAAA,CAGN,CACF,GAEJ,CAEJ,CAAA,CAAA,CAAA,CAAA,EAEJ,EACA1C,EAAA,IAACjB,EAAA,CACC,OAAQ0D,EACR,SAAU,IAAMC,EAAgB,EAAK,EACrC,UAAW,IAAM,CACPI,EAAA,EACRJ,EAAgB,EAAK,CAAA,CACvB,CACF,EACA1C,EAAA,IAAC4B,EAAA,CACC,OAAQe,EACR,YAAaL,EACb,SAAU,IAAM,CACdM,EAAiB,EAAK,EACtBL,EAAe,IAAI,CACrB,EACA,UAAW,IAAM,CACPO,EAAA,EACRP,EAAe,IAAI,EACnBK,EAAiB,EAAK,CAAA,CACxB,CACF,QACCc,EAAc,CAAA,CAAA,CAAA,EACjB,CAEJ"}